{
    "version": "https://jsonfeed.org/version/1",
    "title": "talk is cheap, show me the code",
    "subtitle": "",
    "icon": "https://dengpc-fire.github.io/assets/favicon.ico",
    "description": "Keep on going never give up.",
    "home_page_url": "https://Dengpc-FIRE.github.io",
    "items": [
        {
            "id": "https://dengpc-fire.github.io/2024/11/03/springboot/",
            "url": "https://dengpc-fire.github.io/2024/11/03/springboot/",
            "title": "springboot",
            "date_published": "2024-11-03T11:01:20.000Z",
            "content_html": "<p>src&#x2F;main&#x2F;java<br>└── com&#x2F;example&#x2F;demo<br>├── controller        # 控制器模块<br>│   └── UserController.java<br>├── service           # 业务逻辑模块<br>│   └── UserService.java<br>├── repository        # 数据访问模块<br>│   └── UserRepository.java<br>├── model             # 实体类模块<br>│   └── User.java<br>├── dto               # 数据传输对象模块<br>│   └── UserDTO.java<br>├── exception         # 异常处理模块<br>│   └── GlobalExceptionHandler.java<br>├── config            # 配置模块<br>│   └── AppConfig.java<br>├── util              # 工具类模块<br>│   └── DateUtils.java<br>└── DemoApplication.java  # Spring Boot 启动类</p>\n<p>src&#x2F;main&#x2F;resources<br>└── application.yml  # 配置文件</p>\n<p>src&#x2F;test&#x2F;java<br>└── com&#x2F;example&#x2F;demo<br>├── controller        # 控制器测试模块<br>├── service           # 业务逻辑测试模块<br>└── repository        # 数据访问测试模块</p>\n<h3 id=\"1-DemoApplication\"><a href=\"#1-DemoApplication\" class=\"headerlink\" title=\"1.DemoApplication\"></a>1.DemoApplication</h3><p>DemoApplication.java 是 Spring Boot 应用程序的入口点。它包含 main 方法，负责启动 Spring Boot 应用，加载所有必要的配置和组件。</p>\n<pre><code class=\"javascript\">package com.example.demo;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n@SpringBootApplication\npublic class DemoApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(DemoApplication.class, args);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"2-controller-模块-控制器模块\"><a href=\"#2-controller-模块-控制器模块\" class=\"headerlink\" title=\"2.controller 模块 - 控制器模块\"></a>2.controller 模块 - 控制器模块</h3><ul>\n<li>负责接收用户请求（如 HTTP 请求），并将请求传递到 Service 层进行业务处理。</li>\n<li>验证请求参数并返回相应的响应。</li>\n<li>将业务逻辑处理结果格式化为 JSON 或 XML 等格式的响应数据返回给客户端。</li>\n</ul>\n<pre><code class=\"javascript\">package com.example.demo.controller;\n\nimport com.example.demo.dto.UserDTO;\nimport com.example.demo.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(&quot;/api/users&quot;)\npublic class UserController &#123;\n\n    private final UserService userService;\n\n    @Autowired\n    public UserController(UserService userService) &#123;\n        this.userService = userService;\n    &#125;\n\n    @GetMapping(&quot;/&#123;id&#125;&quot;)\n    public ResponseEntity&lt;UserDTO&gt; getUserById(@PathVariable Long id) &#123;\n        UserDTO user = userService.getUserById(id);\n        return ResponseEntity.ok(user);\n    &#125;\n\n    @PostMapping\n    public ResponseEntity&lt;UserDTO&gt; createUser(@RequestBody UserDTO userDTO) &#123;\n        UserDTO createdUser = userService.createUser(userDTO);\n        return ResponseEntity.ok(createdUser);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"3-service-模块-业务逻辑模块\"><a href=\"#3-service-模块-业务逻辑模块\" class=\"headerlink\" title=\"3.service 模块 - 业务逻辑模块\"></a>3.service 模块 - 业务逻辑模块</h3><p>主要功能</p>\n<ul>\n<li>负责处理具体的业务逻辑，将请求数据转化为系统内部的操作。</li>\n<li>调用 Repository 层来访问数据源。</li>\n<li>包含应用的核心逻辑，例如数据处理、计算、转换等。</li>\n</ul>\n<pre><code class=\"javascript\">package com.example.demo.service;\n\nimport com.example.demo.dto.UserDTO;\nimport com.example.demo.model.User;\nimport com.example.demo.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class UserService &#123;\n\n    private final UserRepository userRepository;\n\n    @Autowired\n    public UserService(UserRepository userRepository) &#123;\n        this.userRepository = userRepository;\n    &#125;\n\n    public UserDTO getUserById(Long id) &#123;\n        User user = userRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));\n        return convertToDTO(user);\n    &#125;\n\n    public UserDTO createUser(UserDTO userDTO) &#123;\n        User user = convertToEntity(userDTO);\n        User savedUser = userRepository.save(user);\n        return convertToDTO(savedUser);\n    &#125;\n\n    private UserDTO convertToDTO(User user) &#123;\n        UserDTO dto = new UserDTO();\n        dto.setId(user.getId());\n        dto.setUsername(user.getUsername());\n        dto.setEmail(user.getEmail());\n        return dto;\n    &#125;\n\n    private User convertToEntity(UserDTO dto) &#123;\n        User user = new User();\n        user.setUsername(dto.getUsername());\n        user.setEmail(dto.getEmail());\n        return user;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"4-repository-模块-数据访问模块\"><a href=\"#4-repository-模块-数据访问模块\" class=\"headerlink\" title=\"4.repository 模块 - 数据访问模块\"></a>4.repository 模块 - 数据访问模块</h3><p>主要功能</p>\n<ul>\n<li>负责与数据库交互，提供 CRUD 操作。</li>\n<li>使用 Spring Data JPA 或其他数据访问技术实现数据持久化。</li>\n<li>通过 JpaRepository 或其他接口简化数据库访问。</li>\n</ul>\n<pre><code class=\"javascript\">package com.example.demo.repository;\n\nimport com.example.demo.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123;\n&#125;\n</code></pre>\n<h3 id=\"5-model-模块-实体类模块\"><a href=\"#5-model-模块-实体类模块\" class=\"headerlink\" title=\"5.model 模块 - 实体类模块\"></a>5.model 模块 - 实体类模块</h3><p>主要功能</p>\n<ul>\n<li>定义业务实体类，用于表示数据模型，每个实体类通常对应数据库中的一张表。</li>\n<li>使用 JPA 注解来映射数据库表结构。</li>\n<li>包含数据字段以及实体之间的关系。</li>\n</ul>\n<pre><code class=\"javascript\">package com.example.demo.model;\n\nimport javax.persistence.*;\n\n@Entity\n@Table(name = &quot;users&quot;)\npublic class User &#123;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String username;\n    private String email;\n\n    // Getters and Setters\n&#125;\n</code></pre>\n<h3 id=\"6-dto-模块-数据传输对象模块\"><a href=\"#6-dto-模块-数据传输对象模块\" class=\"headerlink\" title=\"6.dto 模块 - 数据传输对象模块\"></a>6.dto 模块 - 数据传输对象模块</h3><p>主要功能</p>\n<ul>\n<li>用于封装数据传输的对象，主要在 Controller 和 Service 之间传递。</li>\n<li>数据传输对象可以隐藏或过滤掉不必要的字段，确保安全性。</li>\n<li>与实体类分离，避免直接暴露数据库结构。</li>\n</ul>\n<pre><code class=\"javascript\">package com.example.demo.dto;\n\npublic class UserDTO &#123;\n\n    private Long id;\n    private String username;\n    private String email;\n\n    // Getters and Setters\n&#125;\n</code></pre>\n<h3 id=\"7-exception-模块-异常处理模块\"><a href=\"#7-exception-模块-异常处理模块\" class=\"headerlink\" title=\"7.exception 模块 - 异常处理模块\"></a>7.exception 模块 - 异常处理模块</h3><p>主要功能</p>\n<ul>\n<li>全局异常处理，捕获系统中的异常，并返回统一格式的错误信息。</li>\n<li>通过 @ControllerAdvice 和 @ExceptionHandler 捕获特定异常，返回用户友好的错误信息。</li>\n<li>确保异常不会泄露系统内部信息。</li>\n</ul>\n<pre><code class=\"javascript\">package com.example.demo.exception;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler &#123;\n\n    @ExceptionHandler(RuntimeException.class)\n    public ResponseEntity&lt;String&gt; handleRuntimeException(RuntimeException ex) &#123;\n        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"8-config-模块-配置模块\"><a href=\"#8-config-模块-配置模块\" class=\"headerlink\" title=\"8.config 模块 - 配置模块\"></a>8.config 模块 - 配置模块</h3><p>主要功能</p>\n<ul>\n<li>负责定义和加载应用程序配置，包括第三方库的配置。</li>\n<li>使用 @Configuration 注解定义配置类，可以通过 @Bean 注解定义各种 Bean。</li>\n<li>可以定义全局配置，比如 ModelMapper 等工具类的配置。</li>\n</ul>\n<pre><code class=\"javascript\">package com.example.demo.config;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class AppConfig &#123;\n\n    @Bean\n    public ModelMapper modelMapper() &#123;\n        return new ModelMapper();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"9-util-模块-工具类模块\"><a href=\"#9-util-模块-工具类模块\" class=\"headerlink\" title=\"9.util 模块 - 工具类模块\"></a>9.util 模块 - 工具类模块</h3><p>主要功能</p>\n<ul>\n<li>存放常用的工具类和方法，例如日期处理、字符串操作等。</li>\n<li>提供可重用的代码片段，便于在各个模块中调用。</li>\n<li>避免代码重复，保持项目的简洁和模块化。</li>\n</ul>\n<pre><code class=\"javascript\">package com.example.demo.util;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\npublic class DateUtils &#123;\n\n    public static String formatDateTime(LocalDateTime dateTime) &#123;\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);\n        return dateTime.format(formatter);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"10-application-yml-配置文件\"><a href=\"#10-application-yml-配置文件\" class=\"headerlink\" title=\"10.application.yml - 配置文件\"></a>10.application.yml - 配置文件</h3><p>主要功能</p>\n<ul>\n<li>application.yml 文件存放应用的配置信息，例如数据库连接、端口号、日志配置等。</li>\n<li>可以通过不同的 Profile（如 application-dev.yml，application-prod.yml）实现环境配置的分离。</li>\n</ul>\n<pre><code class=\"javascript\">spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/demo\n    username: root\n    password: password\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  jpa:\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n\nserver:\n  port: 8080\n</code></pre>\n<h3 id=\"模块之间的协作\"><a href=\"#模块之间的协作\" class=\"headerlink\" title=\"模块之间的协作\"></a>模块之间的协作</h3><h4 id=\"Controller-与-Service-层：UserController-处理-HTTP-请求，通过-UserService-完成业务逻辑，返回相应的数据。\"><a href=\"#Controller-与-Service-层：UserController-处理-HTTP-请求，通过-UserService-完成业务逻辑，返回相应的数据。\" class=\"headerlink\" title=\"Controller 与 Service 层：UserController 处理 HTTP 请求，通过 UserService 完成业务逻辑，返回相应的数据。\"></a>Controller 与 Service 层：UserController 处理 HTTP 请求，通过 UserService 完成业务逻辑，返回相应的数据。</h4><h4 id=\"Service-与-Repository-层：UserService-调用-UserRepository-执行数据的-CRUD-操作，处理完数据后将结果返回给-Controller-层。\"><a href=\"#Service-与-Repository-层：UserService-调用-UserRepository-执行数据的-CRUD-操作，处理完数据后将结果返回给-Controller-层。\" class=\"headerlink\" title=\"Service 与 Repository 层：UserService 调用 UserRepository 执行数据的 CRUD 操作，处理完数据后将结果返回给 Controller 层。\"></a>Service 与 Repository 层：UserService 调用 UserRepository 执行数据的 CRUD 操作，处理完数据后将结果返回给 Controller 层。</h4><h4 id=\"Model-与-Repository-层：User-是数据库表的映射类，通过-UserRepository-进行持久化操作。\"><a href=\"#Model-与-Repository-层：User-是数据库表的映射类，通过-UserRepository-进行持久化操作。\" class=\"headerlink\" title=\"Model 与 Repository 层：User 是数据库表的映射类，通过 UserRepository 进行持久化操作。\"></a>Model 与 Repository 层：User 是数据库表的映射类，通过 UserRepository 进行持久化操作。</h4><h4 id=\"DTO-与-Service-层：UserDTO-用于在-Controller-和-Service-之间传输数据。Service-将实体转换为-DTO-再返回给-Controller。\"><a href=\"#DTO-与-Service-层：UserDTO-用于在-Controller-和-Service-之间传输数据。Service-将实体转换为-DTO-再返回给-Controller。\" class=\"headerlink\" title=\"DTO 与 Service 层：UserDTO 用于在 Controller 和 Service 之间传输数据。Service 将实体转换为 DTO 再返回给 Controller。\"></a>DTO 与 Service 层：UserDTO 用于在 Controller 和 Service 之间传输数据。Service 将实体转换为 DTO 再返回给 Controller。</h4><h4 id=\"异常处理模块：GlobalExceptionHandler-捕获全局异常，确保系统返回用户友好的错误信息，而不是暴露详细的内部错误。\"><a href=\"#异常处理模块：GlobalExceptionHandler-捕获全局异常，确保系统返回用户友好的错误信息，而不是暴露详细的内部错误。\" class=\"headerlink\" title=\"异常处理模块：GlobalExceptionHandler 捕获全局异常，确保系统返回用户友好的错误信息，而不是暴露详细的内部错误。\"></a>异常处理模块：GlobalExceptionHandler 捕获全局异常，确保系统返回用户友好的错误信息，而不是暴露详细的内部错误。</h4><h4 id=\"工具类模块：工具类如-DateUtils-可以在各个层中使用，为开发提供便利。\"><a href=\"#工具类模块：工具类如-DateUtils-可以在各个层中使用，为开发提供便利。\" class=\"headerlink\" title=\"工具类模块：工具类如 DateUtils 可以在各个层中使用，为开发提供便利。\"></a>工具类模块：工具类如 DateUtils 可以在各个层中使用，为开发提供便利。</h4>",
            "tags": []
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/JDK8-17%E6%96%B0%E7%89%B9%E6%80%A7/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/JDK8-17%E6%96%B0%E7%89%B9%E6%80%A7/",
            "title": "JDK8-17新特性",
            "date_published": "2024-10-30T13:46:22.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "title": "反射机制",
            "date_published": "2024-10-30T13:44:58.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "title": "网络编程",
            "date_published": "2024-10-30T13:44:49.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/File%E7%B1%BB%E4%B8%8EIO%E6%B5%81/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/File%E7%B1%BB%E4%B8%8EIO%E6%B5%81/",
            "title": "File类与IO流",
            "date_published": "2024-10-30T13:44:41.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/",
            "title": "数据结构与集合源码",
            "date_published": "2024-10-30T13:44:30.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E6%B3%9B%E5%9E%8B/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E6%B3%9B%E5%9E%8B/",
            "title": "泛型",
            "date_published": "2024-10-30T13:44:08.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/",
            "title": "集合框架",
            "date_published": "2024-10-30T13:43:59.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/",
            "title": "常用类和基础API",
            "date_published": "2024-10-30T13:43:47.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "title": "多线程",
            "date_published": "2024-10-30T13:43:34.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "异常处理",
            "date_published": "2024-10-30T13:43:25.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-3/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-3/",
            "title": "面向对象编程-3",
            "date_published": "2024-10-30T13:43:03.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-2/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-2/",
            "title": "面向对象编程-2",
            "date_published": "2024-10-30T13:42:51.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-1/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-1/",
            "title": "面向对象编程-1",
            "date_published": "2024-10-30T13:42:37.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E6%95%B0%E7%BB%84/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E6%95%B0%E7%BB%84/",
            "title": "数组",
            "date_published": "2024-10-30T13:42:04.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/",
            "title": "IDEA的安装与使用",
            "date_published": "2024-10-30T13:41:56.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/",
            "title": "流程控制语句",
            "date_published": "2024-10-30T13:41:39.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/30/java/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E6%B3%95/",
            "url": "https://dengpc-fire.github.io/2024/10/30/java/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E6%B3%95/",
            "title": "变量与运算法",
            "date_published": "2024-10-30T13:41:02.000Z",
            "content_html": "",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/29/Deeplearning/detection/paper-LUD-YOLO/",
            "url": "https://dengpc-fire.github.io/2024/10/29/Deeplearning/detection/paper-LUD-YOLO/",
            "title": "paper-LUD-YOLO",
            "date_published": "2024-10-29T13:09:11.000Z",
            "content_html": "",
            "tags": [
                "Deepleraning",
                "detection",
                "Deepleraning",
                "detection"
            ]
        },
        {
            "id": "https://dengpc-fire.github.io/2024/10/28/java/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/",
            "url": "https://dengpc-fire.github.io/2024/10/28/java/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/",
            "title": "java语言概述",
            "date_published": "2024-10-28T15:02:52.000Z",
            "content_html": "<p><img loading=\"lazy\" data-src=\"/img_2.png\" alt=\"img_2.png\"></p>\n",
            "tags": [
                "java",
                "java"
            ]
        }
    ]
}