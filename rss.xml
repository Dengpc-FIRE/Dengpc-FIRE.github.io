<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>talk is cheap, show me the code</title>
        <subtitle></subtitle>
        <icon>https://dengpc-fire.github.io/assets/favicon.ico</icon>
        <link>https://Dengpc-FIRE.github.io</link>
        <author>
          <name>Dengpc</name>
        </author>
        <description>Keep on going never give up.</description>
        <language>zh-CN</language>
        <pubDate>Sun, 03 Nov 2024 19:01:20 +0800</pubDate>
        <lastBuildDate>Sun, 03 Nov 2024 19:01:20 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/11/03/springboot/</guid>
            <title>springboot</title>
            <link>https://dengpc-fire.github.io/2024/11/03/springboot/</link>
            <pubDate>Sun, 03 Nov 2024 19:01:20 +0800</pubDate>
            <description><![CDATA[ &lt;pre&gt;&lt;code&gt;src/main/java
└── com/example/demo
├── controller        # 控制器模块
│   └── UserController.java
├── service           # 业务逻辑模块
│   └── UserService.java
├── repository        # 数据访问模块
│   └── UserRepository.java
├── model             # 实体类模块
│   └── User.java
├── dto               # 数据传输对象模块
│   └── UserDTO.java
├── exception         # 异常处理模块
│   └── GlobalExceptionHandler.java
├── config            # 配置模块
│   └── AppConfig.java
├── util              # 工具类模块
│   └── DateUtils.java
└── DemoApplication.java  # Spring Boot 启动类

src/main/resources
└── application.yml  # 配置文件

src/test/java
└── com/example/demo
├── controller        # 控制器测试模块
├── service           # 业务逻辑测试模块
└── repository        # 数据访问测试模块
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-DemoApplication-启动类&#34;&gt;&lt;a href=&#34;#1-DemoApplication-启动类&#34; class=&#34;headerlink&#34; title=&#34;1.DemoApplication - 启动类&#34;&gt;&lt;/a&gt;1.DemoApplication - 启动类&lt;/h3&gt;&lt;p&gt;DemoApplication.java 是 Spring Boot 应用程序的入口点。它包含 main 方法，负责启动 Spring Boot 应用，加载所有必要的配置和组件。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;package com.example.demo;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class DemoApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(DemoApplication.class, args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-controller-模块-控制器模块&#34;&gt;&lt;a href=&#34;#2-controller-模块-控制器模块&#34; class=&#34;headerlink&#34; title=&#34;2.controller 模块 - 控制器模块&#34;&gt;&lt;/a&gt;2.controller 模块 - 控制器模块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;负责接收用户请求（如 HTTP 请求），并将请求传递到 Service 层进行业务处理。&lt;/li&gt;
&lt;li&gt;验证请求参数并返回相应的响应。&lt;/li&gt;
&lt;li&gt;将业务逻辑处理结果格式化为 JSON 或 XML 等格式的响应数据返回给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;package com.example.demo.controller;

import com.example.demo.dto.UserDTO;
import com.example.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(&amp;quot;/api/users&amp;quot;)
public class UserController &amp;#123;

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) &amp;#123;
        this.userService = userService;
    &amp;#125;

    @GetMapping(&amp;quot;/&amp;#123;id&amp;#125;&amp;quot;)
    public ResponseEntity&amp;lt;UserDTO&amp;gt; getUserById(@PathVariable Long id) &amp;#123;
        UserDTO user = userService.getUserById(id);
        return ResponseEntity.ok(user);
    &amp;#125;

    @PostMapping
    public ResponseEntity&amp;lt;UserDTO&amp;gt; createUser(@RequestBody UserDTO userDTO) &amp;#123;
        UserDTO createdUser = userService.createUser(userDTO);
        return ResponseEntity.ok(createdUser);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-service-模块-业务逻辑模块&#34;&gt;&lt;a href=&#34;#3-service-模块-业务逻辑模块&#34; class=&#34;headerlink&#34; title=&#34;3.service 模块 - 业务逻辑模块&#34;&gt;&lt;/a&gt;3.service 模块 - 业务逻辑模块&lt;/h3&gt;&lt;p&gt;主要功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责处理具体的业务逻辑，将请求数据转化为系统内部的操作。&lt;/li&gt;
&lt;li&gt;调用 Repository 层来访问数据源。&lt;/li&gt;
&lt;li&gt;包含应用的核心逻辑，例如数据处理、计算、转换等。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;package com.example.demo.service;

import com.example.demo.dto.UserDTO;
import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class UserService &amp;#123;

    private final UserRepository userRepository;

    @Autowired
    public UserService(UserRepository userRepository) &amp;#123;
        this.userRepository = userRepository;
    &amp;#125;

    public UserDTO getUserById(Long id) &amp;#123;
        User user = userRepository.findById(id).orElseThrow(() -&amp;gt; new RuntimeException(&amp;quot;User not found&amp;quot;));
        return convertToDTO(user);
    &amp;#125;

    public UserDTO createUser(UserDTO userDTO) &amp;#123;
        User user = convertToEntity(userDTO);
        User savedUser = userRepository.save(user);
        return convertToDTO(savedUser);
    &amp;#125;

    private UserDTO convertToDTO(User user) &amp;#123;
        UserDTO dto = new UserDTO();
        dto.setId(user.getId());
        dto.setUsername(user.getUsername());
        dto.setEmail(user.getEmail());
        return dto;
    &amp;#125;

    private User convertToEntity(UserDTO dto) &amp;#123;
        User user = new User();
        user.setUsername(dto.getUsername());
        user.setEmail(dto.getEmail());
        return user;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-repository-模块-数据访问模块&#34;&gt;&lt;a href=&#34;#4-repository-模块-数据访问模块&#34; class=&#34;headerlink&#34; title=&#34;4.repository 模块 - 数据访问模块&#34;&gt;&lt;/a&gt;4.repository 模块 - 数据访问模块&lt;/h3&gt;&lt;p&gt;主要功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责与数据库交互，提供 CRUD 操作。&lt;/li&gt;
&lt;li&gt;使用 Spring Data JPA 或其他数据访问技术实现数据持久化。&lt;/li&gt;
&lt;li&gt;通过 JpaRepository 或其他接口简化数据库访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;package com.example.demo.repository;

import com.example.demo.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository&amp;lt;User, Long&amp;gt; &amp;#123;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-model-模块-实体类模块&#34;&gt;&lt;a href=&#34;#5-model-模块-实体类模块&#34; class=&#34;headerlink&#34; title=&#34;5.model 模块 - 实体类模块&#34;&gt;&lt;/a&gt;5.model 模块 - 实体类模块&lt;/h3&gt;&lt;p&gt;主要功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义业务实体类，用于表示数据模型，每个实体类通常对应数据库中的一张表。&lt;/li&gt;
&lt;li&gt;使用 JPA 注解来映射数据库表结构。&lt;/li&gt;
&lt;li&gt;包含数据字段以及实体之间的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;package com.example.demo.model;

import javax.persistence.*;

@Entity
@Table(name = &amp;quot;users&amp;quot;)
public class User &amp;#123;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String username;
    private String email;

    // Getters and Setters
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6-dto-模块-数据传输对象模块&#34;&gt;&lt;a href=&#34;#6-dto-模块-数据传输对象模块&#34; class=&#34;headerlink&#34; title=&#34;6.dto 模块 - 数据传输对象模块&#34;&gt;&lt;/a&gt;6.dto 模块 - 数据传输对象模块&lt;/h3&gt;&lt;p&gt;主要功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于封装数据传输的对象，主要在 Controller 和 Service 之间传递。&lt;/li&gt;
&lt;li&gt;数据传输对象可以隐藏或过滤掉不必要的字段，确保安全性。&lt;/li&gt;
&lt;li&gt;与实体类分离，避免直接暴露数据库结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;package com.example.demo.dto;

public class UserDTO &amp;#123;

    private Long id;
    private String username;
    private String email;

    // Getters and Setters
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7-exception-模块-异常处理模块&#34;&gt;&lt;a href=&#34;#7-exception-模块-异常处理模块&#34; class=&#34;headerlink&#34; title=&#34;7.exception 模块 - 异常处理模块&#34;&gt;&lt;/a&gt;7.exception 模块 - 异常处理模块&lt;/h3&gt;&lt;p&gt;主要功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局异常处理，捕获系统中的异常，并返回统一格式的错误信息。&lt;/li&gt;
&lt;li&gt;通过 @ControllerAdvice 和 @ExceptionHandler 捕获特定异常，返回用户友好的错误信息。&lt;/li&gt;
&lt;li&gt;确保异常不会泄露系统内部信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;package com.example.demo.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler &amp;#123;

    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity&amp;lt;String&amp;gt; handleRuntimeException(RuntimeException ex) &amp;#123;
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8-config-模块-配置模块&#34;&gt;&lt;a href=&#34;#8-config-模块-配置模块&#34; class=&#34;headerlink&#34; title=&#34;8.config 模块 - 配置模块&#34;&gt;&lt;/a&gt;8.config 模块 - 配置模块&lt;/h3&gt;&lt;p&gt;主要功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责定义和加载应用程序配置，包括第三方库的配置。&lt;/li&gt;
&lt;li&gt;使用 @Configuration 注解定义配置类，可以通过 @Bean 注解定义各种 Bean。&lt;/li&gt;
&lt;li&gt;可以定义全局配置，比如 ModelMapper 等工具类的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;package com.example.demo.config;

import org.modelmapper.ModelMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppConfig &amp;#123;

    @Bean
    public ModelMapper modelMapper() &amp;#123;
        return new ModelMapper();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;9-util-模块-工具类模块&#34;&gt;&lt;a href=&#34;#9-util-模块-工具类模块&#34; class=&#34;headerlink&#34; title=&#34;9.util 模块 - 工具类模块&#34;&gt;&lt;/a&gt;9.util 模块 - 工具类模块&lt;/h3&gt;&lt;p&gt;主要功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存放常用的工具类和方法，例如日期处理、字符串操作等。&lt;/li&gt;
&lt;li&gt;提供可重用的代码片段，便于在各个模块中调用。&lt;/li&gt;
&lt;li&gt;避免代码重复，保持项目的简洁和模块化。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;package com.example.demo.util;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class DateUtils &amp;#123;

    public static String formatDateTime(LocalDateTime dateTime) &amp;#123;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;);
        return dateTime.format(formatter);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;10-application-yml-配置文件&#34;&gt;&lt;a href=&#34;#10-application-yml-配置文件&#34; class=&#34;headerlink&#34; title=&#34;10.application.yml - 配置文件&#34;&gt;&lt;/a&gt;10.application.yml - 配置文件&lt;/h3&gt;&lt;p&gt;主要功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application.yml 文件存放应用的配置信息，例如数据库连接、端口号、日志配置等。&lt;/li&gt;
&lt;li&gt;可以通过不同的 Profile（如 application-dev.yml，application-prod.yml）实现环境配置的分离。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;spring:
  datasource:
    url: jdbc:mysql://localhost:3306/demo
    username: root
    password: password
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

server:
  port: 8080
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;模块之间的协作&#34;&gt;&lt;a href=&#34;#模块之间的协作&#34; class=&#34;headerlink&#34; title=&#34;模块之间的协作&#34;&gt;&lt;/a&gt;模块之间的协作&lt;/h3&gt;&lt;h4 id=&#34;Controller-与-Service-层：UserController-处理-HTTP-请求，通过-UserService-完成业务逻辑，返回相应的数据。&#34;&gt;&lt;a href=&#34;#Controller-与-Service-层：UserController-处理-HTTP-请求，通过-UserService-完成业务逻辑，返回相应的数据。&#34; class=&#34;headerlink&#34; title=&#34;Controller 与 Service 层：UserController 处理 HTTP 请求，通过 UserService 完成业务逻辑，返回相应的数据。&#34;&gt;&lt;/a&gt;Controller 与 Service 层：UserController 处理 HTTP 请求，通过 UserService 完成业务逻辑，返回相应的数据。&lt;/h4&gt;&lt;h4 id=&#34;Service-与-Repository-层：UserService-调用-UserRepository-执行数据的-CRUD-操作，处理完数据后将结果返回给-Controller-层。&#34;&gt;&lt;a href=&#34;#Service-与-Repository-层：UserService-调用-UserRepository-执行数据的-CRUD-操作，处理完数据后将结果返回给-Controller-层。&#34; class=&#34;headerlink&#34; title=&#34;Service 与 Repository 层：UserService 调用 UserRepository 执行数据的 CRUD 操作，处理完数据后将结果返回给 Controller 层。&#34;&gt;&lt;/a&gt;Service 与 Repository 层：UserService 调用 UserRepository 执行数据的 CRUD 操作，处理完数据后将结果返回给 Controller 层。&lt;/h4&gt;&lt;h4 id=&#34;Model-与-Repository-层：User-是数据库表的映射类，通过-UserRepository-进行持久化操作。&#34;&gt;&lt;a href=&#34;#Model-与-Repository-层：User-是数据库表的映射类，通过-UserRepository-进行持久化操作。&#34; class=&#34;headerlink&#34; title=&#34;Model 与 Repository 层：User 是数据库表的映射类，通过 UserRepository 进行持久化操作。&#34;&gt;&lt;/a&gt;Model 与 Repository 层：User 是数据库表的映射类，通过 UserRepository 进行持久化操作。&lt;/h4&gt;&lt;h4 id=&#34;DTO-与-Service-层：UserDTO-用于在-Controller-和-Service-之间传输数据。Service-将实体转换为-DTO-再返回给-Controller。&#34;&gt;&lt;a href=&#34;#DTO-与-Service-层：UserDTO-用于在-Controller-和-Service-之间传输数据。Service-将实体转换为-DTO-再返回给-Controller。&#34; class=&#34;headerlink&#34; title=&#34;DTO 与 Service 层：UserDTO 用于在 Controller 和 Service 之间传输数据。Service 将实体转换为 DTO 再返回给 Controller。&#34;&gt;&lt;/a&gt;DTO 与 Service 层：UserDTO 用于在 Controller 和 Service 之间传输数据。Service 将实体转换为 DTO 再返回给 Controller。&lt;/h4&gt;&lt;h4 id=&#34;异常处理模块：GlobalExceptionHandler-捕获全局异常，确保系统返回用户友好的错误信息，而不是暴露详细的内部错误。&#34;&gt;&lt;a href=&#34;#异常处理模块：GlobalExceptionHandler-捕获全局异常，确保系统返回用户友好的错误信息，而不是暴露详细的内部错误。&#34; class=&#34;headerlink&#34; title=&#34;异常处理模块：GlobalExceptionHandler 捕获全局异常，确保系统返回用户友好的错误信息，而不是暴露详细的内部错误。&#34;&gt;&lt;/a&gt;异常处理模块：GlobalExceptionHandler 捕获全局异常，确保系统返回用户友好的错误信息，而不是暴露详细的内部错误。&lt;/h4&gt;&lt;h4 id=&#34;工具类模块：工具类如-DateUtils-可以在各个层中使用，为开发提供便利。&#34;&gt;&lt;a href=&#34;#工具类模块：工具类如-DateUtils-可以在各个层中使用，为开发提供便利。&#34; class=&#34;headerlink&#34; title=&#34;工具类模块：工具类如 DateUtils 可以在各个层中使用，为开发提供便利。&#34;&gt;&lt;/a&gt;工具类模块：工具类如 DateUtils 可以在各个层中使用，为开发提供便利。&lt;/h4&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/JDK8-17%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
            <title>JDK8-17新特性</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/JDK8-17%E6%96%B0%E7%89%B9%E6%80%A7/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:46:22 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</guid>
            <title>反射机制</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:44:58 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
            <title>网络编程</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:44:49 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/File%E7%B1%BB%E4%B8%8EIO%E6%B5%81/</guid>
            <title>File类与IO流</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/File%E7%B1%BB%E4%B8%8EIO%E6%B5%81/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:44:41 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</guid>
            <title>数据结构与集合源码</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:44:30 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E6%B3%9B%E5%9E%8B/</guid>
            <title>泛型</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E6%B3%9B%E5%9E%8B/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:44:08 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</guid>
            <title>集合框架</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:43:59 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/</guid>
            <title>常用类和基础API</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:43:47 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
            <title>多线程</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:43:34 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
            <title>异常处理</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:43:25 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-3/</guid>
            <title>面向对象编程-3</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-3/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:43:03 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-2/</guid>
            <title>面向对象编程-2</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-2/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:42:51 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-1/</guid>
            <title>面向对象编程-1</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-1/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:42:37 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E6%95%B0%E7%BB%84/</guid>
            <title>数组</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E6%95%B0%E7%BB%84/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:42:04 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
            <title>IDEA的安装与使用</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:41:56 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid>
            <title>流程控制语句</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:41:39 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/30/java/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E6%B3%95/</guid>
            <title>变量与运算法</title>
            <link>https://dengpc-fire.github.io/2024/10/30/java/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E6%B3%95/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Wed, 30 Oct 2024 21:41:02 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/29/Deeplearning/detection/paper-LUD-YOLO/</guid>
            <title>paper-LUD-YOLO</title>
            <link>https://dengpc-fire.github.io/2024/10/29/Deeplearning/detection/paper-LUD-YOLO/</link>
            <category term="Deepleraning" scheme="https://dengpc-fire.github.io/categories/Deepleraning/" />
            <category term="detection" scheme="https://dengpc-fire.github.io/categories/Deepleraning/detection/" />
            <category term="Deepleraning" scheme="https://dengpc-fire.github.io/tags/Deepleraning/" />
            <category term="detection" scheme="https://dengpc-fire.github.io/tags/detection/" />
            <pubDate>Tue, 29 Oct 2024 21:09:11 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dengpc-fire.github.io/2024/10/28/java/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</guid>
            <title>java语言概述</title>
            <link>https://dengpc-fire.github.io/2024/10/28/java/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</link>
            <category term="java" scheme="https://dengpc-fire.github.io/categories/java/" />
            <category term="java" scheme="https://dengpc-fire.github.io/tags/java/" />
            <pubDate>Mon, 28 Oct 2024 23:02:52 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/img_2.png&#34; alt=&#34;img_2.png&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
